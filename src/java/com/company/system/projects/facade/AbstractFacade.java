
package com.company.system.projects.facade;

import java.util.List;
import javax.persistence.EntityManager;

/**
 *
 * @author ---GPL---
 * This is a standard class, which organize a FACADE pattern. Generated by NetBeans. 
 */
public abstract class AbstractFacade<T> {
    private Class<T> entityClass;
    

    public AbstractFacade(Class<T> entityClass) {
        this.entityClass = entityClass;
    }

    protected abstract EntityManager getEntityManager();

   
    public void create(T entity) {
        getEntityManager().persist(entity);
        
    }

    public void edit(T entity) {
        getEntityManager().merge(entity);
    }
    
    public void remove(T entity)  {
        getEntityManager().remove(getEntityManager().merge(entity));
    }

    public T find(Object id) {
        return getEntityManager().find(entityClass, id);
    }

    public List<T> findAll() {
        javax.persistence.criteria.CriteriaQuery cq = getEntityManager().getCriteriaBuilder().createQuery();
        cq.select(cq.from(entityClass));
        return getEntityManager().createQuery(cq).getResultList();
    }

    public List<T> findRange(int[] range) {
        javax.persistence.criteria.CriteriaQuery cq = getEntityManager().getCriteriaBuilder().createQuery();
        cq.select(cq.from(entityClass));
        javax.persistence.Query q = getEntityManager().createQuery(cq);
        q.setMaxResults(range[1] - range[0]);
        q.setFirstResult(range[0]);
        return q.getResultList();
    }

    public int count() {
        javax.persistence.criteria.CriteriaQuery cq = getEntityManager().getCriteriaBuilder().createQuery();
        javax.persistence.criteria.Root<T> rt = cq.from(entityClass);
        cq.select(getEntityManager().getCriteriaBuilder().count(rt));
        javax.persistence.Query q = getEntityManager().createQuery(cq);
        return ((Long) q.getSingleResult()).intValue();
    }
    
    /**
     *  Method checking uniqueness of the new field in the DB (ERID or email)
     * @param uniqueField (String email or Integer erid)
     * @return true if new field is unique
     * @return false if new field already exists in the DB
     */
    public final boolean isFieldExist(Object uniqueField) {
        T result = findInstanceByUniqueField(uniqueField);
        if (result == null || result.toString().equals("")) {
            return false;
        }
        return true;
    }
    /** Get Erid or Person from the concrete Entity */
    public abstract T findInstanceByUniqueField(Object uniqueField);
}
